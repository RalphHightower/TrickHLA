/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard reference frames.
 *---------------------------------------------------------------------------*
 * This is a Simulation Definition (S_define) module that defines the
 * standard SpaceFOM reference frame base simulation object instance.
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: July 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/
 

//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameBaseSimObject - A SpaceFOM reference frame
// instance base simulation object definition.
//==========================================================================
##include <iostream>
##include <map>

// SpaceFOM include files.
##include "SpaceFOM/RefFrameBase.hh"
##include "SpaceFOM/RefFrameLagCompBase.hh"
##include "SpaceFOM/RefFrameConditionalBase.hh"
##include "SpaceFOM/RefFrameOwnershipHandler.hh"
##include "SpaceFOM/RefFrameDeleted.hh"

class SpaceFOMRefFrameBaseSimObject : public Trick::SimObject {

  public:
   
   /* HLA associated reference frames packing object. */
   SpaceFOM::RefFrameBase * frame_base_ptr;

   /* HLA lag compensation object. */
   SpaceFOM::RefFrameLagCompBase * lag_comp_base_ptr;

   /* HLA conditional object. */
   SpaceFOM::RefFrameConditionalBase conditional;

   /* HLA Ownership Handler object. */
   SpaceFOM::RefFrameOwnershipHandler ownership_handler;

   /* HLA RefFrame deleted object. */
   SpaceFOM::RefFrameDeleted deleted_callback;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   SpaceFOMRefFrameBaseSimObject( SpaceFOM::RefFrameBase    & frame_packing_ref,
                                  SpaceFOM::RefFrameLagComp & lag_comp_ref,
                                  unsigned short              _INIT = P_HLA_INIT  )
   : frame_base_ptr( &frame_packing_ref ),
     lag_comp_base_ptr( &lag_comp_ref ),
     conditional( frame_packing_ref )
   {
      //
      // Desfault data jobs
      //
      ("default_data") default_config();
      
      //
      // Initialization jobs
      //
      P_INIT ("initialization") frame_base_ptr->initialize();
      P_INIT ("initialization") lag_comp_base_ptr->initialize();

   }
   
  protected:
   virtual int default_config()
   {
      // Get the associated TrickHLA manager object.
      TrickHLA::Object * mngr_obj_ptr = frame_base_ptr->get_object();
      
      // If the manager object is set, then configure the auxiliary services.
      // This will probably only be true for configuring with defualt data.
      if ( mngr_obj_ptr != NULL ) {
      
         // Setup lag compensation.
         mngr_obj_ptr->lag_comp      = lag_comp_base_ptr;
         mngr_obj_ptr->lag_comp_type = TrickHLA::LAG_COMPENSATION_NONE;
      
         // Setup the auxiliary object management services.
         mngr_obj_ptr->conditional = &conditional;
         mngr_obj_ptr->ownership   = &ownership_handler;
         mngr_obj_ptr->deleted     = &deleted_callback;
      
      }
      
      return( 0 );
   }

  private:
   // Add you reference frame working data reference here.
   // SpaceFOM::RefFrameData * ref_frame_data_ptr;

   // This object is not copyable
   SpaceFOMRefFrameBaseSimObject( SpaceFOMRefFrameBaseSimObject const & );
   SpaceFOMRefFrameBaseSimObject & operator=( SpaceFOMRefFrameBaseSimObject const & );

};
