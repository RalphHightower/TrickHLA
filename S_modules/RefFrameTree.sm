/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard reference frames.
 *---------------------------------------------------------------------------*
 * This is a Simulation Definition (S_define) module that defines the
 * standard SpaceFOM reference frame tree.
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: July 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/
 

//==========================================================================
// SIM_OBJECT: RefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
##include <iostream>
##include <map>
##include "include/SpaceFOM/ref_frame_state.hh"
class RefFrameTreeSimObject : public Trick::SimObject {

  public:
  
   // Map used to build and manage the reference frame tree.
   std::map<std::string, SpaceFOM::RefFrameBase *> ref_frame_map;

   // References to working SpaceFOM reference frames.
   SpaceFOM::RefFrameBase * ssbary_frame_ptr;
   SpaceFOM::RefFrameBase * sun_frame_ptr;
   SpaceFOM::RefFrameBase * embary_frame_ptr;
   SpaceFOM::RefFrameBase * earth_frame_ptr;
   SpaceFOM::RefFrameBase * moon_frame_ptr;
   SpaceFOM::RefFrameBase * mars_frame_ptr;
   SpaceFOM::RefFrameBase * earth_pfix_frame_ptr;
   SpaceFOM::RefFrameBase * moon_pfix_frame_ptr;
   SpaceFOM::RefFrameBase * mars_pfix_frame_ptr;

   // SpaceFOM Reference Frame Tree constructor.
   RefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                          SpaceFOM::ExecutionControl & exec_cntrl_in,
                          double                     & time_tt_in )
   : thla_manager(thla_manager_in),
     exec_cntrl( exec_cntrl_in ),
     time_tt(time_tt_in)
   {
      //
      // Default data jobs
      //
 #ifdef DEFAULT_DATA_CONFIG
      ("default_data") configure_tree();
 #endif

      // Place the frames in the tree map for name lookup.
      P_0 ("initialization") ref_frame_map.insert({ ssbary_frame_ptr->name, ssbary_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ sun_frame_ptr->name, sun_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ embary_frame_ptr->name, embary_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ earth_frame_ptr->name, earth_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ moon_frame_ptr->name, moon_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ mars_frame_ptr->name, mars_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ earth_pfix_frame_ptr->name, earth_pfix_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ moon_pfix_frame_ptr->name, moon_pfix_frame_ptr });
      P_0 ("initialization") ref_frame_map.insert({ mars_pfix_frame_ptr->name, mars_pfix_frame_ptr });
      
      // Build the reference frame tree.
      P_INIT ("initialization") rebuild_tree()

   }
   
   
  protected:
   void build_tree()
   {
      check_tree()
      return;
   }
   
   bool check_tree()
   {
      return( true );
   }


  private:

   // Configure the reference frame tree.
   void configure_tree()
   {
      std::ostringstream errmsg;

      // Check for objects allocation.
      if ( (thla_manager.obj_count == 0) || (thla_manager.objects == NULL) ){
         errmsg << "RefFrameTreeSimObject::configure_tree():" << __LINE__
                << " ERROR: The TrickHLAManager Object array has not been allocated!" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Setup the Solar System barycenter frame as the root reference frame.
      ssbary_frame_ptr->default_data( "solar_system_barycenter",
                                      "frame_packing",
                                      NULL,
                                      "SolarSystemBarycentricInertial",
                                      false );

      // Set the Solar System barycenter frame as the root reference frame.
      exec_cntrl.root_ref_frame = ssbary_frame_ptr;

      // Setup the Sun inertial reference frame.
      sun_frame_ptr->default_data( "sun_inertial",
                                   "frame_packing",
                                   "SolarSystemBarycentricInertial",
                                   "SunCentricInertial",
                                   false );

      // Setup the Earth-Moon barycentric inertial reference frame.
      embary_frame_ptr->default_data( "earth_moon_barycenter",
                                      "frame_packing",
                                      "SolarSystemBarycentricInertial",
                                      "EarthMoonBarycentricInertial",
                                      false );

      // Setup the Earth inertial reference frame.
      earth_frame_ptr->default_data( "earth_centered_inertial",
                                     "frame_packing",
                                     "EarthMoonBarycentricInertial",
                                     "EarthMJ2000Eq",
                                     false );

      // Setup the Moon inertial reference frame.
      moon_frame_ptr->default_data( "moon_centered_inertial",
                                    "frame_packing",
                                    "EarthMoonBarycentricInertial",
                                    "MoonCentricInertial",
                                    false );

      // Setup the Mars inertial reference frame.
      mars_frame_ptr->default_data( "mars_centered_inertial",
                                    "frame_packing",
                                    "SolarSystemBarycentricInertial",
                                    "MarsCentricInertial",
                                    false );

      // Setup the Earth fixed reference frame.
      earth_pfix_frame_ptr->default_data( "earth_centered_fixed",
                                          "frame_packing",
                                          "EarthMJ2000Eq",
                                          "EarthCentricFixed",
                                          false );

      // Setup the Moon fixed reference frame.
      moon_pfix_frame_ptr->default_data( "moon_centered_fixed",
                                         "frame_packing",
                                         "MoonCentricInertial",
                                         "MoonCentricFixed",
                                         false );

      // Setup the Mars fixed reference frame.
      mars_pfix_frame_ptr->default_data( "mars_centered_fixed",
                                         "frame_packing",
                                         "MarsCentricInertial",
                                         "MarsCentricFixed",
                                         false );
   }

   // Need for scheduled job persitence.
   TrickHLA::Manager & thla_manager;
   SpaceFOM::ExecutionControl & exec_cntrl;
   double & time_tt;


   // This object is not copyable
   RefFrameTreeSimObject( const RefFrameTreeSimObject & );
   RefFrameTreeSimObject & operator=( const RefFrameTreeSimObject & );

};
