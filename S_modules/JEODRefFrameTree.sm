/*****************************************************************************
 * General TrickHLA Space Reference Federation Object Model (SpaceFOM)
 * Simulation Definition Object for the standard reference frames.
 *---------------------------------------------------------------------------*
 * This is a Simulation Definition (S_define) module that defines the
 * standard SpaceFOM/JEOD reference frame tree.
 ****************************************************************************/
/*****************************************************************************
 *       Author: Edwin Z. Crues
 *         Date: June 2023
 *       E-Mail: Edwin.Z.Crues@nasa.gov
 *        Phone: 281-483-2902
 * Organization: Mail Code ER7
 *               Simulation & Graphics Branch
 *               Software, Robotics & Simulation Division
 *               2101 NASA Parkway
 *               Houston, Texas 77058
 *---------------------------------------------------------------------------*
 * Modified By: 
 *        Date: 
 * Description: 
 ****************************************************************************/
 

//==========================================================================
// SIM_OBJECT: JEODRefFrameTreeSimObject - An JEOD reference frame tree
// simulation object definition.
//==========================================================================
##include <iostream>
##include "utils/ref_frames/include/ref_frame_state.hh"
#include "RefFrameTreeBase.sm"
class JEODRefFrameTreeSimObject : public RefFrameTreeBaseSimObject {

  public:

   // SpaceFOM Reference Frame Tree constructor.
   // _ADD and _BUILD phases need to be less than 60, when TrickHLA is initialized.
   JEODRefFrameTreeSimObject( TrickHLA::Manager          & thla_manager_in,
                              SpaceFOM::ExecutionControl & exec_cntrl_in,
                              jeod::TimeTT               & time_tt_in,
                              jeod::DynManager           & dyn_manager_in,
                              jeod::Planet               & sun_in,
                              jeod::Planet               & earth_in,
                              jeod::Planet               & moon_in,
                              jeod::Planet               & mars_in,
                              unsigned short               _ADD   = 50,
                              unsigned short               _BUILD = 51 )
   : RefFrameTreeBaseSimObject( thla_manager_in, exec_cntrl_in, _ADD, _BUILD ),
     time_tt( time_tt_in ),
     dyn_manager( dyn_manager_in ),
     sun( sun_in ),
     earth( earth_in ),
     moon( moon_in ),
     mars( mars_in )
   {
      //
      // Default data jobs
      //

      // We need to subscribe to the desired reference frames to insure that
      // JEOD updates them.
      P_EPH ("initialization") subscribe_to_frames();
      P_EPH ("initialization") solar_system_barycenter.set_frames( ssbary_ptr, ssbary_ptr );
      P_EPH ("initialization") sun_inertial.set_frames( ssbary_ptr, &sun.inertial );
      P_EPH ("initialization") earth_moon_barycenter.set_frames( ssbary_ptr, embary_ptr );
      P_EPH ("initialization") earth_centered_inertial.set_frames( embary_ptr, &earth.inertial );
      P_EPH ("initialization") moon_centered_inertial.set_frames( embary_ptr, &moon.inertial );
      P_EPH ("initialization") mars_centered_inertial.set_frames( ssbary_ptr, &mars.inertial );
      P_EPH ("initialization") earth_centered_fixed.set_frames( &earth.inertial, &earth.pfix );
      P_EPH ("initialization") moon_centered_fixed.set_frames( &moon.inertial, &moon.pfix );
      P_EPH ("initialization") mars_centered_fixed.set_frames( &mars.inertial, &mars.pfix );
      
      // Place the frames into the tree.  For example . . .
      P_ADD ("initialization") frame_tree.add_frame( &(solar_system_barycenter.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(sun_inertial.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(earth_moon_barycenter.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(earth_centered_inertial.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(moon_centered_inertial.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(mars_centered_inertial.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(earth_centered_fixed.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(moon_centered_fixed.frame_packing) );
      P_ADD ("initialization") frame_tree.add_frame( &(mars_centered_fixed.frame_packing) );
   }


   // Subscribe to the needed JEOD reference frames.
   void subscribe_to_frames()
   {
      // We can start with the planetary frames.
      sun.inertial.subscribe();
      earth.inertial.subscribe();
      earth.pfix.subscribe();
      moon.inertial.subscribe();
      moon.pfix.subscribe();
      mars.inertial.subscribe();
      mars.pfix.subscribe();

      // We need to lookup the barycentric frames.
      ssbary_ptr = dyn_manager.find_ref_frame ("SSBary.inertial");
      // Must have a reference to the Solar System Barycenter frame.
      if ( ssbary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: SSBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }
      embary_ptr = dyn_manager.find_ref_frame ("EMBary.inertial");
      if ( embary_ptr == NULL ) {
         std::ostringstream errmsg;
         errmsg << "JEODRefFrameTreeSimObject::subscribe_to_frames():" << __LINE__
                << " ERROR: Unexpected NULL reference frame: EMBary.inertial" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Subscribe to the barycenter frames.
      ssbary_ptr->subscribe();
      embary_ptr->subscribe();

      return;
   }


  public:

   // References to working SpaceFOM reference frames.
   SpaceFOM::JEODRefFrameState * ssbary_frame_ptr;
   SpaceFOM::JEODRefFrameState * sun_frame_ptr;
   SpaceFOM::JEODRefFrameState * embary_frame_ptr;
   SpaceFOM::JEODRefFrameState * earth_frame_ptr;
   SpaceFOM::JEODRefFrameState * moon_frame_ptr;
   SpaceFOM::JEODRefFrameState * mars_frame_ptr;
   SpaceFOM::JEODRefFrameState * earth_pfix_frame_ptr;
   SpaceFOM::JEODRefFrameState * moon_pfix_frame_ptr;
   SpaceFOM::JEODRefFrameState * mars_pfix_frame_ptr;


  protected:

   // Configure the reference frame tree.
   void configure_tree()
   {
      std::ostringstream errmsg;

      // Check for objects allocation.
      if ( (thla_manager.obj_count == 0) || (thla_manager.objects == NULL) ) {
         errmsg << "JEODRefFrameTreeSimObject::configure_tree():" << __LINE__
                << " ERROR: The TrickHLAManager Object array has not been allocated!" << THLA_ENDL;
         // Print message and terminate.
         TrickHLA::DebugHandler::terminate_with_message( errmsg.str() );
      }

      // Setup the Solar System barycenter frame as the root reference frame.
      ssbary_frame_ptr->default_data( "solar_system_barycenter",
                                      "frame_packing",
                                      NULL,
                                      "SolarSystemBarycentricInertial",
                                      false );

      // Set the Solar System barycenter frame as the root reference frame.
      exec_cntrl.root_ref_frame = ssbary_frame_ptr;

      // Setup the Sun inertial reference frame.
      sun_frame_ptr->default_data( "sun_inertial",
                                   "frame_packing",
                                   "SolarSystemBarycentricInertial",
                                   "SunCentricInertial",
                                   false );

      // Setup the Earth-Moon barycentric inertial reference frame.
      embary_frame_ptr->default_data( "earth_moon_barycenter",
                                      "frame_packing",
                                      "SolarSystemBarycentricInertial",
                                      "EarthMoonBarycentricInertial",
                                      false );

      // Setup the Earth inertial reference frame.
      earth_frame_ptr->default_data( "earth_centered_inertial",
                                     "frame_packing",
                                     "EarthMoonBarycentricInertial",
                                     "EarthMJ2000Eq",
                                     false );

      // Setup the Moon inertial reference frame.
      moon_frame_ptr->default_data( "moon_centered_inertial",
                                    "frame_packing",
                                    "EarthMoonBarycentricInertial",
                                    "MoonCentricInertial",
                                    false );

      // Setup the Mars inertial reference frame.
      mars_frame_ptr->default_data( "mars_centered_inertial",
                                    "frame_packing",
                                    "SolarSystemBarycentricInertial",
                                    "MarsCentricInertial",
                                    false );

      // Setup the Earth fixed reference frame.
      earth_pfix_frame_ptr->default_data( "earth_centered_fixed",
                                          "frame_packing",
                                          "EarthMJ2000Eq",
                                          "EarthCentricFixed",
                                          false );

      // Setup the Moon fixed reference frame.
      moon_pfix_frame_ptr->default_data( "moon_centered_fixed",
                                         "frame_packing",
                                         "MoonCentricInertial",
                                         "MoonCentricFixed",
                                         false );

      // Setup the Mars fixed reference frame.
      mars_pfix_frame_ptr->default_data( "mars_centered_fixed",
                                         "frame_packing",
                                         "MarsCentricInertial",
                                         "MarsCentricFixed",
                                         false );
   }

    // Need for scheduled job persitence.
   jeod::TimeTT & time_tt;
   jeod::DynManager & dyn_manager;
   jeod::Planet & sun;
   jeod::Planet & earth;
   jeod::Planet & moon;
   jeod::Planet & mars;

   // Need additional reference frames not directly associated with a
   // planet.  These are for the two principal barycentric frames for
   // the solar system (SSBary) and the Earth-Moon (EMBary)
   jeod::RefFrame * ssbary_ptr; ///< @trick_units{--} Solar system barycenter.
   jeod::RefFrame * embary_ptr; ///< @trick_units{--} Earth-Moon system barycenter.
   
  private:

   // This object is not copyable
   JEODRefFrameTreeSimObject( const JEODRefFrameTreeSimObject & );
   JEODRefFrameTreeSimObject & operator=( const JEODRefFrameTreeSimObject & );

};
