//==========================================================================
// Space Reference FOM: Simulation to test the SpaceFOM roles implementation.
//==========================================================================
// Description:
// This is a simulation definition file (S_define) that provides an example
// of an SpaceFOM compliant federate that services all SpaceFOM roles.
//==========================================================================

//==========================================================================
// Define the Trick executive and services simulation object instances:
// Use the "standard" Trick executive simulation object. This simulation
// object provides the traditional Trick executive capabilities but can be
// tailored to provide facility or project unique executive behavior. See
// the Trick documentation for more on usage and available options.
//==========================================================================
#include "sim_objects/default_trick_sys.sm"

//==========================================================================
// Define the Dynamics job cycle times.
//==========================================================================
#define INTEG_STEP_TIME 0.025 // State integration time step.

//==========================================================================
// Define the Trick HLA job cycle times.
//==========================================================================
#define THLA_DATA_CYCLE_TIME        0.250 // HLA data communication cycle time.
#define THLA_INTERACTION_CYCLE_TIME 0.050 // HLA Interaction cycle time.

//==========================================================================
// Define the HLA phase initialization priorities.
//==========================================================================
#define P_HLA_INIT   60    // HLA initialization phase.
#define P_HLA_EARLY  1     // HLA early job phase.
#define P_HLA_LATE   65534 // HLA late job phase.



//==========================================================================
// Simple 6DOF dynamics for a Physical/Dynamical Entity.
//==========================================================================
##include "../../../models/EntityDynamics/include/EntityDynamics.hh"
class EntityDynamicsSimObject : public Trick::SimObject {

  public:
   EntityDynamics entity;

  public:
   EntityDynamicsSimObject(){
      ("default_data")            entity.default_data();
      ("initialization")          entity.initialize();
      ("derivative")              entity.derivative();
      ("integration") trick_ret = entity.integrate();
   }

  private:
   // This object is not copyable
   EntityDynamicsSimObject( EntityDynamicsSimObject const & rhs );
   EntityDynamicsSimObject & operator=( EntityDynamicsSimObject const & rhs );

};

//==========================================================================
// Trick HLA and SpaceFOM include files used in SimObject definitions or
// for inputfile instantiations.
//==========================================================================
// This is needed for CTE timeline instantiation in the input file.
##include "TrickHLA/CTETimelineBase.hh"


//==========================================================================
// SIM_OBJECT: THLA - Generalized TrickHLA interface routines.
//==========================================================================
#include "SpaceFOM.sm"

%header{
 using namespace TrickHLA;
 using namespace SpaceFOM;
%}

//==========================================================================
// SIM_OBJECT: THLA_INIT - An example of a TrickHLA multi-phase
// initialization SimObject.
//==========================================================================
class THLAInitSimObject : public Trick::SimObject {

 public:

   THLAInitSimObject( TrickHLA::Manager  & thla_mngr,
                      TrickHLA::Federate & thla_fed   ) 
      : thla_manager( thla_mngr ),
        thla_federate( thla_fed )
   {

      //--------------------------------------------------------------------
      // NOTE: Initialization phase numbers must be greater than P60 
      // (i.e. P_HLA_INIT) so that the initialization jobs run after the
      // P60 THLA.manager->initialize() job.
      //--------------------------------------------------------------------

      // Alternative method: Send and receive all the initialization data.

      // Send all the initialization data.
      P100 ("initialization") thla_manager.send_init_data();
      
      // Wait to receive all the initialization data.
      P100 ("initialization") thla_manager.receive_init_data();
      
      // Do some processing here if needed...
      
      // Clear remaining initialization sync-points.
      P100 ("initialization") thla_manager.clear_init_sync_points();
   }

 private:
   TrickHLA::Manager  & thla_manager;
   TrickHLA::Federate & thla_federate;
	
   // Do not allow the implicit copy constructor or assignment operator.
   THLAInitSimObject( THLAInitSimObject const & rhs );
   THLAInitSimObject & operator=( THLAInitSimObject const & rhs );
	
   // Do not allow the default constructor.
   THLAInitSimObject();

};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameTreeSimObject - An example reference frame tree
// simulation object definition.
//==========================================================================
##include "SpaceFOM/RefFrameTree.hh"
class SpaceFOMRefFrameTreeSimObject : public Trick::SimObject {

  public:
   /* Reference frame data. */
   RefFrameData root_frame_data;
   RefFrameData vehicle_frame_data;

   SpaceFOMRefFrameTreeSimObject( )
   {
   }

  private:

   // This object is not copyable
   SpaceFOMRefFrameTreeSimObject( SpaceFOMRefFrameTreeSimObject const & );
   SpaceFOMRefFrameTreeSimObject & operator=( SpaceFOMRefFrameTreeSimObject const & );


};


//==========================================================================
// SIM_OBJECT: SpaceFOMRefFrameSimObject - An example reference frame
// simulation object definition. This can be used for SpaceFOM ReferenceFrame
// object discovery and data exchange.
//==========================================================================
##include "SpaceFOM/RefFrameState.hh"
##include "SpaceFOM/RefFrameConditionalBase.hh"
##include "SpaceFOM/RefFrameLagComp.hh"
##include "SpaceFOM/RefFrameOwnershipHandler.hh"
##include "SpaceFOM/RefFrameDeleted.hh"

class SpaceFOMRefFrameSimObject : public Trick::SimObject {

  public:
   
   /* HLA associated reference frames packing object. */
   SpaceFOM::RefFrameState frame_packing;

   /* HLA conditional object. */
   RefFrameConditionalBase conditional;

   /* HLA lag compensation object. */
   RefFrameLagComp lag_compensation;

   /* HLA Ownership Handler object. */
   RefFrameOwnershipHandler ownership_handler;

   /* HLA RefFrame deleted object. */
   RefFrameDeleted deleted_callback;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   SpaceFOMRefFrameSimObject( RefFrameData & frame_data_ref,
                              unsigned short _INIT = 50  )
   : frame_packing( frame_data_ref ),
     conditional( frame_packing ),
     lag_compensation( frame_packing ),
     ref_frame_data_ptr( &frame_data_ref )
   {
      
      //
      // Initialization jobs
      //
      P_INIT ("initialization") frame_packing.initialize();
      P_INIT ("initialization") lag_compensation.initialize();

   }

  private:
   RefFrameData * ref_frame_data_ptr;

   // This object is not copyable
   SpaceFOMRefFrameSimObject( SpaceFOMRefFrameSimObject const & );
   SpaceFOMRefFrameSimObject & operator=( SpaceFOMRefFrameSimObject const & );

};


//==========================================================================
// SIM_OBJECT: SpaceFOMPhysicalEntiySimObject - An example PhysicalEntity
// simulation object definition. This can be used for SpaceFOM
// PhysicalEntity object discovery and data exchange.
//==========================================================================
//#define USE_SA_INTEGRATOR
##include "SpaceFOM/PhysicalEntity.hh"
##include "SpaceFOM/PhysicalEntityConditionalBase.hh"
#ifdef USE_SA_INTEGRATOR
##include "SAIntegrator/include/PhysicalEntityLagCompSA2.hh"
#else
##include "SpaceFOM/PhysicalEntityLagComp.hh"
#endif
##include "SpaceFOM/PhysicalEntityOwnershipHandler.hh"
##include "SpaceFOM/PhysicalEntityDeleted.hh"

class SpaceFOMPhysicalEntitySimObject : public Trick::SimObject {

  public:
   // DynamicalEntity data.
   PhysicalEntityData & pe_data;

   /* HLA associated reference frames packing object. */
   SpaceFOM::PhysicalEntity entity_packing;

   /* HLA conditional object. */
   PhysicalEntityConditionalBase conditional;

   /* HLA lag compensation object. */
#ifdef USE_SA_INTEGRATOR
   PhysicalEntityLagCompSA2 lag_compensation;
#else
   PhysicalEntityLagComp lag_compensation;
#endif

   /* HLA Ownership Handler object. */
   PhysicalEntityOwnershipHandler ownership_handler;

   /* HLA PhysicalEntity deleted object. */
   PhysicalEntityDeleted deleted_callback;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   SpaceFOMPhysicalEntitySimObject( PhysicalEntityData & pe,
                                    unsigned short       _INIT = P_HLA_INIT )
   : pe_data( pe ),
     entity_packing( pe ),
     conditional( entity_packing ),
     lag_compensation( entity_packing )
   {

      //
      // Initialization jobs
      //
      P_INIT ("initialization") entity_packing.initialize();
      P_INIT ("initialization") lag_compensation.initialize();

   }

  private:

   // This object is not copyable
   SpaceFOMPhysicalEntitySimObject( SpaceFOMPhysicalEntitySimObject const & );
   SpaceFOMPhysicalEntitySimObject & operator=( SpaceFOMPhysicalEntitySimObject const & );

};


//==========================================================================
// SIM_OBJECT: SpaceFOMDynamicalEntiySimObject - An example DynamicalEntity
// simulation object definition. This can be used for SpaceFOM
// DynamicalEntity object discovery and data exchange.
//==========================================================================
##include "SpaceFOM/DynamicalEntity.hh"
##include "SpaceFOM/DynamicalEntityConditionalBase.hh"
##include "SpaceFOM/DynamicalEntityLagComp.hh"
##include "SpaceFOM/DynamicalEntityOwnershipHandler.hh"
##include "SpaceFOM/DynamicalEntityDeleted.hh"
class SpaceFOMDynamicalEntitySimObject : public Trick::SimObject {

  public:

   // DynamicalEntity data.
   PhysicalEntityData  & pe_data;
   DynamicalEntityData & de_data;

   /* HLA associated reference frames packing object. */
   SpaceFOM::DynamicalEntity entity_packing;

   /* HLA conditional object. */
   DynamicalEntityConditionalBase conditional;

   /* HLA lag compensation object. */
   DynamicalEntityLagComp lag_compensation;

   /* HLA Ownership Handler object. */
   DynamicalEntityOwnershipHandler ownership_handler;

   /* HLA PhysicalEntity deleted object. */
   DynamicalEntityDeleted deleted_callback;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   SpaceFOMDynamicalEntitySimObject( PhysicalEntityData  & pe,
                                     DynamicalEntityData & de,
                                     unsigned short        _INIT = P_HLA_INIT )
   : pe_data(pe),
     de_data(de),
     entity_packing( pe, de ),
     conditional(entity_packing),
     lag_compensation( entity_packing )
   {

      //
      // Initialization jobs
      //
      P_INIT ("initialization") entity_packing.initialize();
      P_INIT ("initialization") lag_compensation.initialize();

   }

  private:

   // This object is not copyable
   SpaceFOMDynamicalEntitySimObject( SpaceFOMDynamicalEntitySimObject const & );
   SpaceFOMDynamicalEntitySimObject & operator=( SpaceFOMDynamicalEntitySimObject const & );

};


//==========================================================================
// SIM_OBJECT: SpaceFOMPhysicalInterfaceSimObject - An example
// PhysicalInterface simulation object definition. This can be used for
// SpaceFOM PhysicalInterface object discovery and data exchange.
//==========================================================================
##include "SpaceFOM/PhysicalInterface.hh"
##include "SpaceFOM/PhysicalInterfaceConditionalBase.hh"
##include "SpaceFOM/PhysicalInterfaceOwnershipHandler.hh"
##include "SpaceFOM/PhysicalInterfaceDeleted.hh"
class SpaceFOMPhysicalInterfaceSimObject : public Trick::SimObject {

  public:
   // DynamicalEntity data.
   PhysicalInterfaceData  interface_data;

   /* HLA associated reference frames packing object. */
   SpaceFOM::PhysicalInterface interface_packing;

   /* HLA conditional object. */
   PhysicalInterfaceConditionalBase conditional;

   /* HLA Ownership Handler object. */
   PhysicalInterfaceOwnershipHandler ownership_handler;

   /* HLA PhysicalInterface deleted object. */
   PhysicalInterfaceDeleted deleted_callback;

   // _INIT phase needs to be less than 60, when TrickHLA is initialized.
   SpaceFOMPhysicalInterfaceSimObject( unsigned short _INIT = P_HLA_INIT )
   : interface_packing( interface_data ),
     conditional( interface_packing )
   {

      //
      // Initialization jobs
      //
      P_INIT ("initialization") interface_packing.initialize();

   }

  private:

   // This object is not copyable
   SpaceFOMPhysicalInterfaceSimObject( SpaceFOMPhysicalInterfaceSimObject const & );
   SpaceFOMPhysicalInterfaceSimObject & operator=( SpaceFOMPhysicalInterfaceSimObject const & );

};


//==========================================================================
// SimObject instantiations.
//==========================================================================
EntityDynamicsSimObject pe_dynamics;
EntityDynamicsSimObject de_dynamics;

// Main TrickHLA SimObject.
SpaceFOMSimObject THLA( THLA_DATA_CYCLE_TIME, THLA_INTERACTION_CYCLE_TIME,
                        P_HLA_EARLY, P_HLA_INIT, P_HLA_LATE );

// SimObject used capture simulation specific initialization.
THLAInitSimObject THLA_INIT( THLA.manager, THLA.federate );

// SimObject used for root reference frame discovery.
SpaceFOMRefFrameTreeSimObject ref_frame_tree;
SpaceFOMRefFrameSimObject root_ref_frame( ref_frame_tree.root_frame_data );
SpaceFOMRefFrameSimObject ref_frame_A( ref_frame_tree.vehicle_frame_data );

// PhysicalEntity instance.
SpaceFOMPhysicalEntitySimObject physical_entity( pe_dynamics.entity.pe_data );

// DynamicalEntity instance.
SpaceFOMDynamicalEntitySimObject dynamical_entity( de_dynamics.entity.pe_data,
                                                   de_dynamics.entity.de_data );

// PhysicalInterface instance.
SpaceFOMPhysicalInterfaceSimObject physical_interface;

// Place the entities in the integration loop.
//IntegLoop dyn_integloop (0.125) pe_dynamics, de_dynamics;
IntegLoop pe_integloop (INTEG_STEP_TIME) pe_dynamics;
IntegLoop de_integloop (INTEG_STEP_TIME) de_dynamics;
